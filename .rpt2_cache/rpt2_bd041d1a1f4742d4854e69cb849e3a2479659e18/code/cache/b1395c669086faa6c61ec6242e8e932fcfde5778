{"code":"import { isObject, cloneDeep } from './utils';\r\nvar defaultConfig = {\r\n    size: 90,\r\n    alpha: 0.6,\r\n    zIndex: -1 // z-index\r\n};\r\nvar dpr = window.devicePixelRatio || 1; // get devicePixelRatio\r\nvar width = window.innerWidth; // innerWidth\r\nvar height = window.innerHeight; // innerHeight\r\nvar PI_2 = Math.PI * 2;\r\nvar RIBBON_HEIGHT = defaultConfig.size;\r\nvar r = 0;\r\nvar Ribbons = /** @class */ (function () {\r\n    function Ribbons(option) {\r\n        this.config = this.extractConfig(option);\r\n        this.canvasRibbon = document.createElement('canvas');\r\n        this.init();\r\n    }\r\n    Ribbons.prototype.init = function () {\r\n        document.addEventListener('touchmove', function (e) {\r\n            e.preventDefault();\r\n        });\r\n        // init canvas\r\n        this.initCanvas();\r\n        document.onclick = this.init.bind(this);\r\n        document.ontouchstart = this.init.bind(this);\r\n    };\r\n    // init canvas\r\n    Ribbons.prototype.initCanvas = function () {\r\n        this.canvasRibbon.style.cssText = 'position:absolute;top:0;left:0;width:100%;height:100%;pointer-events: none;z-index:' + defaultConfig.zIndex;\r\n        document.getElementsByTagName('body')[0].appendChild(this.canvasRibbon);\r\n        this.ctx = this.canvasRibbon.getContext('2d'); // get canvas context\r\n        this.canvasRibbon.width = width * dpr;\r\n        this.canvasRibbon.height = height * dpr;\r\n        if (this.ctx) {\r\n            this.ctx.scale(dpr, dpr);\r\n            this.ctx.globalAlpha = this.config.alpha;\r\n            this.ctx.clearRect(0, 0, width, height);\r\n        }\r\n        RIBBON_HEIGHT = this.config.size;\r\n        // init path\r\n        this.path = [\r\n            {\r\n                x: 0,\r\n                y: height * 0.7 + RIBBON_HEIGHT\r\n            },\r\n            {\r\n                x: 0,\r\n                y: height * 0.7 - RIBBON_HEIGHT\r\n            }\r\n        ];\r\n        while (this.path[1].x < width + RIBBON_HEIGHT) {\r\n            this.drawLine(this.path[0], this.path[1]);\r\n        }\r\n    };\r\n    // drawLine\r\n    Ribbons.prototype.drawLine = function (start, end) {\r\n        var ctx = this.ctx;\r\n        if (ctx) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(start.x, start.y);\r\n            ctx.lineTo(end.x, end.y);\r\n        }\r\n        // draw next point\r\n        var nextX = end.x + (Math.random() * 2 - 0.25) * RIBBON_HEIGHT;\r\n        var nextY = this._calculateY(end.y);\r\n        if (ctx) {\r\n            ctx.lineTo(nextX, nextY);\r\n            ctx.closePath();\r\n        }\r\n        r -= PI_2 / -50;\r\n        // Randomly generate and set the canvas path hex color\r\n        if (ctx) {\r\n            ctx.fillStyle = '#' + (((Math.cos(r) * 127 + 128) << 16) | ((Math.cos(r + PI_2 / 3) * 127 + 128) << 8) | (Math.cos(r + (PI_2 / 3) * 2) * 127 + 128)).toString(16);\r\n            ctx.fill();\r\n        }\r\n        this.path[0] = this.path[1]; // Update current endpoint to next starting point\r\n        this.path[1] = {\r\n            x: nextX,\r\n            y: nextY\r\n        };\r\n    };\r\n    // Calculate the value of the next point y\r\n    Ribbons.prototype._calculateY = function (y) {\r\n        var temp = y + (Math.random() * 2 - 1.1) * RIBBON_HEIGHT;\r\n        var MaximumTemp = RIBBON_HEIGHT * 0.7;\r\n        return temp > height || temp < 0 ? MaximumTemp : temp;\r\n    };\r\n    Ribbons.prototype.extractConfig = function (option) {\r\n        if (isObject(option)) {\r\n            return Object.assign(cloneDeep(defaultConfig), option);\r\n        }\r\n        return defaultConfig;\r\n    };\r\n    return Ribbons;\r\n}());\r\nexport default Ribbons;\r\n","references":["/Users/foreverw/Documents/KuangPF_Github/ribbons/src/utils.ts"],"dts":{"name":"/Users/foreverw/Documents/KuangPF_Github/ribbons/src/index.d.ts","writeByteOrderMark":false,"text":"interface IOptions {\r\n    size: number;\r\n    alpha: number;\r\n    zIndex: number;\r\n}\r\ninterface IPath {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport default class Ribbons {\r\n    config: IOptions;\r\n    canvasRibbon: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    path: IPath[];\r\n    constructor(option?: IOptions);\r\n    init(): void;\r\n    initCanvas(): void;\r\n    drawLine(start: IPath, end: IPath): void;\r\n    _calculateY(y: number): number;\r\n    extractConfig(option?: IOptions): IOptions;\r\n}\r\nexport {};\r\n"}}
